#!/bin/bash

# Compiles all of the files in the System_Codes folder.
# Update this file as new files are added.
# Most files that need to be run from a terminal should just be placed in the System_Codes folder, and in the SYNC/ or RDOUT/ folder if it is specific to one type of board.
# Usage: sudo ./compile [board type (rdout/sync)]


# make sure user is root
if [ "$EUID" -ne 0 ]
  then echo "Please run as root."
  exit
fi


# Check for arguments, get board type
if [ $# -eq 0 ]; then
	echo "No arguments supplied. Proper usage is sudo ./compile [board type (rdout/sync)]"
	exit
fi
TYPE="$1"


# General
gcc -o read_flash_memory	src/read_flash_memory.c	-l bcm2835
gcc -o read_board_ID		src/read_board_ID.c	-l bcm2835
gcc -o program_fpga		src/program_fpga.c	-l bcm2835
gcc -o get_board_type		src/get_board_type.c	-l bcm2835
gcc -o pwr_cycle		src/pwr_cycle.c		-l bcm2835


# Sync Specific
if [ "$TYPE" == "sync" ]; then

	gcc -o SYNC/check_cable_disconnect	src/SYNC/check_cable_disconnect.c	-l bcm2835
	gcc -o SYNC/set_clk_delay		src/SYNC/set_clk_delay.c		-l bcm2835
	gcc -o SYNC/calibrate_clk_delays	src/SYNC/calibrate_clk_delays.c		-l bcm2835
	gcc -o SYNC/run_on_boot			src/SYNC/run_on_boot.c			-l bcm2835

	# if rc.local doesn't already have run_on_boot, add it!
	RUN_ON_BOOT_LOC="$PWD/SYNC/run_on_boot"
	if ! grep -q "run_on_boot" /etc/rc.local ; then
		# checks for the string run_on_boot
		# if it's not found, adds the line "sudo ./path/to/SYNC/run_on_boot &" to the second to last line of rc.local
		# the last line of rc.local is exit
		sed '$i \
			sudo .'"$RUN_ON_BOOT_LOC"' &
		' /etc/rc.local
	fi

	exit 0
fi


# Readout Specific
if [ "$TYPE" == "rdout" ]; then
	exit 0
fi


echo "The argument must either be 'sync' or 'rdout'"
